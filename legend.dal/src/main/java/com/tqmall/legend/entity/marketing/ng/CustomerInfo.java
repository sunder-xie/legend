package com.tqmall.legend.entity.marketing.ng;import com.tqmall.common.util.DateUtil;import com.tqmall.legend.entity.base.BaseEntity;import lombok.Data;import lombok.EqualsAndHashCode;import java.math.BigDecimal;import java.util.Date;/**    * @功能描述: 客户信息 * @日期 2016-03-02 * @版本号 V1.0 * */@Data@EqualsAndHashCode(callSuper = false)public class CustomerInfo extends BaseEntity {		private Long shopId = Long.valueOf("0");//   门店id	private Long customerId = Long.valueOf("0");//   客户id	private Long customerCarId = Long.valueOf("0");//   客户车辆id    private String customerName;//   客户姓名    private String mobile;//   手机号	private String carLicense;//   车牌	private String contactName;//   联系人	private String contactMobile;//   联系电话	private Long carBrandId = Long.valueOf("0");//   车品牌id	private String carBrand;//   车品牌	private Long carSeriesId = Long.valueOf("0");//   车系列id	private String carSeries;//   车系列	private String carLevel;//   车辆级别	private Date lastPayTime;//   最近结算时间	private Long carModelId = Long.valueOf("0");//   车型id	private String carModel;//   车型	private BigDecimal totalAmount = BigDecimal.ZERO;//   累计消费金额	private Integer totalNumber = Integer.valueOf("0");//   累计消费次数	private Integer carLevelTag = Integer.valueOf("0");//   客户级别打标0 低端客户 1 中端客户 2 高端客户    private Long appointId;// 预约单id	private Date appointCreateTime;//   预约单下单时间	private Date appointTime;//   预约时间	private String appointContent;//   	private Long mileage = Long.valueOf("0");//   行驶里程	private Date noteKeepupTime;//   保养到期时间	private Date noteInsuranceTime;//   保险到期时间	private Date noteAuditingTime;//   年检到期时间	private Date noteVisitTime;//   计划回访时间	private Date birthday;//   客户生日    private Long lastOrderId;//  最近工单id    private BigDecimal average;//单车产值    private Long lastPayDays;//未到店时间    private String customerTag;//客户标签    private String customerCompany;//客户单位    private Integer memberCardCount;//会员卡数量    private String memberCardTypeName;// 会员卡类型名称   public String getCustomerName(){       if(customerName != null){           return customerName;       }else{           return "";       }   }    public String getMobile(){        if(mobile != null){            return mobile;        }else{            return "";        }    }    public String getCarLicense(){        if(carLicense !=null){            return carLicense;        }else{            return  "";        }    }    public Long getLastPayDays(){        if(lastPayDays != null){            return lastPayDays;        }        if(lastPayTime != null){            long time = lastPayTime.getTime();            long now = System.currentTimeMillis();            return (now-time)/1000/60/60/24;        }        return null;    }    public BigDecimal getAverage(){        if(average != null){            return average;        }        if(totalAmount != null && totalNumber != null && totalNumber != 0){            return totalAmount.divide(new BigDecimal(totalNumber),2,BigDecimal.ROUND_HALF_UP);        }        return BigDecimal.ZERO;    }	public String getCarModel(){		if(carBrand==null){            carBrand="";        }        if(carSeries==null){            carSeries="";        }        return carBrand+carSeries;	}	public String getLastPayTimeStr(){        if(lastPayTime != null){            return DateUtil.convertDateToYMD(lastPayTime);        }        return null;	}    public String getAppointTimeStr(){        if(appointTime != null){            return DateUtil.convertDateToYMD(appointTime);        }        return null;    }    public String getAppointCreateTimeStr(){        if(appointTime != null){            return DateUtil.convertDateToYMD(appointCreateTime);        }        return null;    }    public String getNoteKeepupTimeStr(){        if(noteKeepupTime != null){            return DateUtil.convertDateToYMD(noteKeepupTime);        }        return null;    }    public String getNoteInsuranceTimeStr(){        if(noteInsuranceTime != null){            return DateUtil.convertDateToYMD(noteInsuranceTime);        }        return null;    }    public String getNoteAuditingTimeStr(){        if(noteAuditingTime != null){            return DateUtil.convertDateToYMD(noteAuditingTime);        }        return null;    }    public String getNoteVisitTimeStr(){        if(noteVisitTime != null){            return DateUtil.convertDateToYMD(noteVisitTime);        }        return null;    }    public String getBirthdayStr(){        if(birthday != null){            return DateUtil.convertDateToYMD(birthday);        }        return null;    }}